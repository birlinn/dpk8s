minikube start -p dpk8s -n 5 --kubernetes-version=v1.21.2


(mkdir dpk8s && cd dpk8s)


### ArgoCD


(cd argocd)


# create argocd ns

kubectl create namespace argocd


# apply installation manifest

kubectl apply -n argocd -f argocd-main.yaml

[ONLINE: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml]


# install argocd cli

wget https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
mv argocd-linux-amd64 argocd
chmod +x argocd
sudo mv /usr/local/bin/argocd


# configure loadbalancer for argocd web ui

minikube -p dpk8s addons enable metallb

# it might be useful to check the minikube host IP before running the metallb config

minikube -p dpk8s ip

minikube -p dpk8s addons configure metallb


# check that the argocd-server service is running

kubectl get svc -n argocd
NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
argocd-dex-server       ClusterIP   10.108.28.137    <none>        5556/TCP,5557/TCP,5558/TCP   20m
argocd-metrics          ClusterIP   10.106.165.199   <none>        8082/TCP                     20m
argocd-redis            ClusterIP   10.109.40.155    <none>        6379/TCP                     20m
argocd-repo-server      ClusterIP   10.111.120.112   <none>        8081/TCP,8084/TCP            20m
argocd-server           ClusterIP   10.99.59.139     <none>        80/TCP,443/TCP               20m
argocd-server-metrics   ClusterIP   10.107.117.145   <none>        8083/TCP                     20m


# patch the argocd-server service to type load balancer 

kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

# you should now have an external IP

kubectl get svc -n argocd
NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                      AGE
argocd-dex-server       ClusterIP      10.108.28.137    <none>          5556/TCP,5557/TCP,5558/TCP   24m
argocd-metrics          ClusterIP      10.106.165.199   <none>          8082/TCP                     24m
argocd-redis            ClusterIP      10.109.40.155    <none>          6379/TCP                     24m
argocd-repo-server      ClusterIP      10.111.120.112   <none>          8081/TCP,8084/TCP            24m
argocd-server           LoadBalancer   10.99.59.139     192.168.49.10   80:30321/TCP,443:32420/TCP   24m
argocd-server-metrics   ClusterIP      10.107.117.145   <none>          8083/TCP                     24m


# get initial argocd password and change it

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo

# check login

argocd login <ARGOCD-SERVER>

# change password

argocd account update-password


# deploy a sample app via argocd

# add minikube cluster to argocd cluster list

argocd cluster add dpk8s

# it might be useful to verify the "dest-server" field:
# argocd cluster list
# SERVER                          NAME        VERSION  STATUS   MESSAGE
# https://kubernetes.default.svc  in-cluster           Unknown  Cluster has no application and not being monitored.

argocd app create guestbook \
       --repo https://github.com/birlinn/dpk8s.git \
       --path argocd-example-apps/guestbook \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace argocd-guestbook \
       --upsert

argocd app sync guestbook

argocd app get guestbook

# get an external IP by patching the guestbook-ui service to type load balancer 

kubectl patch svc guestbook-ui -n argocd-guestbook -p '{"spec": {"type": "LoadBalancer"}}'

(cd ../)


### Longhorn


(cd longhorn)


# install required OS packages on all minikube nodes

for i in $(kubectl get nodes | awk -F' ' '{print $1}' | awk '(NR>1)')
do
    echo "#################################################################"
    echo "updating Minikube nodes..."
    echo $i
    minikube -p dpk8s ssh -n $i "sudo apt update; sudo apt install -y open-iscsi tgt"
done


# check installation environment

[ONLINE: wget https://raw.githubusercontent.com/longhorn/longhorn/v1.2.2/scripts/environment_check.sh]
[chmod +x environment_check.sh]

./environment_check.sh


# create argocd longhorn application

argocd app create longhorn \
       --repo https://github.com/birlinn/dpk8s.git \
       --path longhorn \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace longhorn-system \
       --upsert


# sync it

argocd app sync longhorn


# verify it

argocd app get longhorn


# get an external IP by patching the longhorn-frontend service to type load balancer

kubectl patch svc longhorn-frontend -n longhorn-system -p '{"spec": {"type": "LoadBalancer"}}'

(cd ../)


### Cert-manager


argocd app create cert-manager \
       --repo https://github.com/birlinn/dpk8s.git \
       --path cert-manager \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace cert-manager \
       --upsert


argocd app sync cert-manager


### Sealed secrets


argocd app create sealed-secrets \
       --repo https://github.com/birlinn/dpk8s.git \
       --path sealed-secrets \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace kube-system \
       --upsert

argocd app sync sealed-secrets


### Linkerd


(cd linkerd)


# install the linkerd cli on minikube host as per instructions here: https://linkerd.io/2.11/getting-started/


# run linkerd cluster preflight checks

linkerd check --pre


# pipe the output of "linkerd install" to a yaml file and git commit & push it to our repo
# linkerd install > install.yaml


# create argocd linkerd application

argocd app create linkerd \
       --repo https://github.com/birlinn/dpk8s.git \
       --path linkerd \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace linkerd \
       --upsert


# sync it

argocd app sync linkerd


# verify it

argocd app get linkerd


# verify it again

linkerd check


# deploy the linkerd demo app, emojivoto


# wget https://run.linkerd.io/emojivoto.yml

# git commit & push it to our repo


argocd app create emojivoto \
       --repo https://github.com/birlinn/dpk8s.git \
       --path emojivoto \
       --dest-server https://kubernetes.default.svc \
       --dest-namespace emojivoto \
       --upsert



# get an external IP by patching the web-svc service to type load balancer

kubectl patch svc web-svc -n emojivoto -p '{"spec": {"type": "LoadBalancer"}}'


kubectl get -n emojivoto deploy -o yaml | linkerd inject > emojivoto-enmesh.yaml